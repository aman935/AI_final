/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphCanvas.java
 *
 * Created on Aug 28, 2009, 12:16:30 AM
 */

package alviz.main;

import alviz.base.graph.GraphPainter;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 *
 * @author baskaran
 */
public class GraphCanvas extends javax.swing.JPanel implements MouseListener, KeyListener {

    private Application app=null;
    private boolean shiftMode=false;

    /** Creates new form GraphCanvas */
    public GraphCanvas() {
        initComponents();
    }

    public void setApp(Application app) {
        this.app = app;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    synchronized public void update(Graphics g) {
        paintComponent(g);
    }

    @Override
    synchronized public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (app == null) return;
        if (app.graph == null) return;
        GraphPainter.paint(app.graph, g, app.graphSelector.getNodes());
    }

    public void keyTyped(KeyEvent e) { }
    public void keyPressed(KeyEvent e) {
        shiftMode = e.isShiftDown();
    }
    public void keyReleased(KeyEvent e) {
        shiftMode = false;
    }

    public void mouseClicked(MouseEvent e) {
        if (app != null && app.inNodeSelectionState())  {
            if(app.graph != null) {
                app.graphSelector.mouseClicked(e.getX(), e.getY(), shiftMode);
                repaint();
            }
        }
        requestFocus();
    }
    public void mousePressed(MouseEvent e) { }
    public void mouseReleased(MouseEvent e) { }
    public void mouseEntered(MouseEvent e) { }
    public void mouseExited(MouseEvent e) { }

}
